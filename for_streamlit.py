# -*- coding: utf-8 -*-
"""for StreamLit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WA8m9tAEXt4imV_6XUYi6cyDhXGxjLeg

# OpenAI's API Setup

Install the Openai module
"""

import os
OPENAI_API_KEY = input("Enter your OpenAI API key: ")
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

!pip install openai

import openai
print(openai.__version__)

GPT4 = 'gpt-4o-mini'
GPT3 = "gpt-3.5-turbo"

"""## Helper Function for API Calling"""

client = openai.OpenAI(api_key=OPENAI_API_KEY)

def get_completion(prompt, model=GPT4):
    messages = [{"role": "user", "content": prompt}]
    response = client.chat.completions.create(
        model=model,
        messages=messages,
        temperature=0
    )
    return response.choices[0].message.content

text = """
Hello, world!!
"""

prompt = f"""
As an professional assistance, answer the given question, or instruction, outlined by angle brackets.
Text: <{text}>
"""

resp = get_completion(f'{prompt}')
print(resp)

"""# LangChain: Post Tagging

## Setup
"""

!pip install langchain
!pip install langchain-openai
!pip install langchain-community

"""**Import**
*   `ChatOpenAI`: For creating `llms` object
*   `ChatPromptTemplate`: For generating `prompt` from prompt template
*   `BaseModel, Field, List`: For creating `schema` object
"""

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from typing import List

"""## Data for Demonstration

"""

text = (
"วันนี้รถไฟฟ้ามีการให้บริการต่อเนื่องดีมาก ไม่มีดีเลย์เลยครับ",
"ทำไมวันนี้บันไดเลื่อนที่สถานีสยามเสียทั้งสองทาง เป็นปัญหาตลอดเลย",
"อยากสอบถามว่าระบบบัตรโดยสารแบบใหม่สามารถใช้กับ MRT ได้ด้วยหรือเปล่าครับ",
"ผมว่ารถไฟฟ้า BTS เร็วกว่ารถเมล์เพราะไม่ติดรถติด แต่ถ้าเทียบกับ MRT บางครั้ง MRT ก็น่าใช้กว่าเพราะมีสถานีเชื่อมเยอะ",
"ถ้าปรับปรุงห้องน้ำในแต่ละสถานีให้สะอาดกว่านี้ น่าจะช่วยสร้างความประทับใจให้ผู้โดยสารได้ดีขึ้นนะ",
"โปรชวนเพื่อนขึ้น BTS หนึ่งเดือนฟรีนี่จริงหรือเปล่า เห็นโฆษณาแล้วเลยอยากรู้รายละเอียด",
"ช่วงนี้เห็นคนพูดถึงรถไฟฟ้า BTS บนทวิตเตอร์เยอะมาก สงสัยว่ามีแคมเปญหรือกระแสอะไรใหม่ ๆ อีกหรือเปล่า",
"แนะนำให้ทำระบบแจ้งเตือนผ่านแอป เวลารถไฟฟ้าขัดข้อง เพื่อลดความวุ่นวายของผู้โดยสาร",
"โอ๊ย ถ้าราคาตั๋วแพงขึ้นอีก ฉันคงต้องหันไปนั่งวินมอเตอร์ไซค์แทนละ",
"นั่ง BTS มาสิบปีแล้ว ไม่เคยเจอเหตุขัดข้องร้ายแรงเลย ถือว่าโชคดีมาก"
)

"""## Setting up LLM Model, Prompt, and Schema for output format"""

llm = ChatOpenAI(temperature=0, model=GPT4, openai_api_key=OPENAI_API_KEY)

"""## Prompt"""

tagging_prompt = ChatPromptTemplate.from_template(
"""คุณคือผู้ช่วยด้านการวิเคราะห์ความคิดเห็นของลูกค้าสำหรับโครงการ Social Listening ที่เกี่ยวข้องกับบริการรถไฟฟ้า BTS ในประเทศไทย งานของคุณคือการจัดประเภทข้อความตามเงื่อนไขต่อไปนี้

[1] หมวดหมู่ (categories):
- การให้บริการ (Service & Operations)
- เหตุการณ์พิเศษ / ปัญหาเฉพาะหน้า (Incidents & Issues)
- ประสบการณ์และความคิดเห็นของผู้โดยสาร (Passenger Experience & Sentiment)
- การเปรียบเทียบกับระบบขนส่งอื่น (Comparisons & Alternatives)
- แคมเปญการตลาด / โฆษณา / ความร่วมมือ (Marketing & Partnerships)
- กระแสสังคม / เทรนด์ออนไลน์เกี่ยวกับ BTS
- หมวดหมู่อื่น ๆ

[2] เจตนา (intent):
- ร้องเรียน/มีปัญหา
- สอบถาม
- เปรียบเทียบ
- ข้อเสนอแนะ
- แบ่งปันประสบการณ์
- ประชด/เสียดสี
- เจตนาอื่น ๆ

[3] อารมณ์ (sentiment):
- Positive
- Neutral
- Negative

ข้อความที่จะให้วิเคราะห์:
"{post}"
"""
)

"""## Schema"""

from typing import List

class TaggingSchema(BaseModel):
    category: str = Field(
        description="""ระบุหมวดหมู่เดียวที่เกี่ยวข้องมากที่สุด""",
    )
    intent: str = Field(
        description="""ระบุเจตนาเดียวที่เกี่ยวข้องมากที่สุด""",
        enum=['ร้องเรียน/มีปัญหา', 'สอบถาม', 'ข้อเสนอแนะ', 'แบ่งปันประสบการณ์', 'ประชด/เสียดสี', 'เจตนาอื่น ๆ']
    )
    sentiment: str = Field(
        description="""ระบุอารมณ์หลักของข้อความ""",
        enum=['Positive', 'Negative', 'Neutral']
    )

llm_structured = llm.with_structured_output(TaggingSchema)

"""## Create Tagging Chain and Apply"""

tagging_chain = tagging_prompt | llm_structured

import pandas as pd
from pydantic import ValidationError

results = []

for i, textn in enumerate(text, start=0):
    print(f"Processing round: {i}")

    try:
        chain_output = tagging_chain.invoke(input={'post': textn})
        results.append({
            'Round': i,
            'Post': textn,
            'Sentiment': chain_output.dict().get('sentiment', ''),
            'Summary': chain_output.dict().get('intent', ''),
            'Categories': chain_output.dict().get('category', '')
        })

    except ValidationError as e:
        print(f"Validation error on round {i}: {e}")
        results.append({
            'Round': i,
            'Post': textn,
            'Sentiment': 'Error',
            'Summary': 'Error',
            'Categories': 'Error'
        })

results_df = pd.DataFrame(results)
print(results_df)

from google.colab import files
results_df.to_excel('results.xlsx', index=False)
files.download('results.xlsx')